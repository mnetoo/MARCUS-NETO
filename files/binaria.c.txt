/*

--------    IMPLEMENTAÇÃO DAS FUNÇÕES DE ORDENAÇÃO E BUSCA    --------
--------    ALUNO: MARCUS SEBASTIÃO ADRIANO ROCHA NETO GRR: 20240710    --------
--------    Algoritmos de Ordenação: QuickSort, ShellSort, SelectionSort    --------
--------    Algoritmos de Busca: Sequencial, Binária    --------
--------    TRABALHO PRÁTICO - PROF. DR .ELIAS     --------

*/


//                                       ALGORITMO DE BUSCA BINÁRIA


// Função de busca binária no vetor ordenado
int buscaBinaria(int vetor[], int tamanho, int elemento, int *contagemComparacoes) {
    int inicio = 0, fim = tamanho - 1; // Define os limites iniciais do vetor (início e fim)
    *contagemComparacoes = 0; // Zera a contagem de comparações no início da busca

    // Loop principal da busca binária que continua enquanto o intervalo for válido
    while (inicio <= fim) {
        int meio = (inicio + fim) / 2; // Calcula o índice do elemento do meio
        (*contagemComparacoes)++; // Incrementa a contagem de comparações

        // Verifica se o elemento do meio é o elemento procurado
        if (vetor[meio] == elemento) {
            return meio;  // Retorna o índice onde o elemento foi encontrado
        }
        else if (vetor[meio] < elemento) {
            inicio = meio + 1; // Ajusta o início para buscar na metade direita
        }
        else {
            fim = meio - 1; // Ajusta o fim para buscar na metade esquerda
        }
    }
    return -1;  // Retorna -1 se o elemento não for encontrado no vetor
}




// Função para permitir consulta de elemento no vetor, com entrada ou número aleatório
void realizarBuscaBinaria(int vetor[], int tamanho) {
    int elemento, contagemComparacoes = 0, opcao;

    // Loop para garantir que o usuário escolha uma opção válida
    do {
        printf("Escolha uma opção para a busca binária:\n");
        printf("1 - Digitar o elemento a ser buscado\n");
        printf("2 - Gerar aleatoriamente o elemento a ser buscado\n");
        printf("Opção: ");
        scanf("%d", &opcao);

        // Exibe mensagem de erro se a opção for inválida
        if (opcao != 1 && opcao != 2) {
            printf("Opção inválida! Por favor, escolha 1 ou 2.\n");
        }
    } while (opcao != 1 && opcao != 2); // Repete até que o usuário forneça uma opção válida

    // Define o valor do elemento a ser buscado
    if (opcao == 1) {
        printf("Digite o elemento a ser buscado: ");
        scanf("%d", &elemento); // Lê o número digitado pelo usuário
    } else {
        elemento = rand() % (MAX_VAL + 1); // Gera um número aleatório entre 0 e MAX_VAL
        printf("Elemento gerado aleatoriamente: %d\n", elemento); // Exibe o número gerado
    }

    // Realiza a busca binária no vetor ordenado
    int posicao = buscaBinaria(vetor, tamanho, elemento, &contagemComparacoes);

    // Exibe o resultado da busca
    if (posicao != -1) {
        printf("Elemento encontrado na posição: %d\n", posicao); // Se encontrado, exibe a posição
    } else {
        printf("Elemento não encontrado no vetor.\n"); // Caso contrário, indica que não foi encontrado
    }
    printf("Número de comparações realizadas: %d\n", contagemComparacoes); // Exibe o total de comparações
}




// Função para realizar a busca binária com número aleatório
void BuscaBinariaAleat(int vetor[], int tamanho, int *comparacoes) {
    int elemento = rand() % (MAX_VAL + 1); // Gera um número aleatório entre 0 e MAX_VAL
    buscaBinaria(vetor, tamanho, elemento, comparacoes); // Realiza a busca binária com o número gerado
}