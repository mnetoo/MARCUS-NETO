/*

--------    IMPLEMENTAÇÃO DAS FUNÇÕES DE ORDENAÇÃO E BUSCA    --------
--------    ALUNO: MARCUS SEBASTIÃO ADRIANO ROCHA NETO GRR: 20240710    --------
--------    Algoritmos de Ordenação: QuickSort, ShellSort, SelectionSort    --------
--------    Algoritmos de Busca: Sequencial, Binária    --------
--------    TRABALHO PRÁTICO - PROF. DR .ELIAS     --------

*/


//                                      UTILIZANDO A SEQUÊNCIA DE HIBBARD


// Função que ordena o vetor utilizando o método ShellSort com a sequência de Hibbard
void shellSortHibbard(int vetor[], int n) 
{
    int k = 1;
    
    // Calcula o maior gap de Hibbard que seja menor que o tamanho do vetor
    // A sequência de Hibbard é gerada pela fórmula: gap = (2^k - 1), onde k é um inteiro positivo
    // O loop encontra o maior k tal que (2^k - 1) seja menor que o tamanho do vetor
    while ((1 << k) - 1 < n) {
        k++;  // Incrementa k até que o gap gerado seja maior ou igual ao tamanho do vetor
    }
    k--;  // Ajusta k para garantir que o gap final seja válido

    // Loop principal: percorre os gaps da sequência de Hibbard
    // A cada iteração, o gap é calculado como (2^k - 1) e diminui após cada passagem
    for (int gap = (1 << k) - 1; gap > 0; k--, gap = (1 << k) - 1) {
        
        // Ordena os elementos com o gap atual
        // A cada gap, o vetor é dividido em subgrupos e ordenado como uma variação do InsertionSort
        for (int i = gap; i < n; i++) {
            int temp = vetor[i];  // Armazena o valor atual do vetor para comparação posterior
            int j;

            // Compara o elemento com o anterior a uma distância igual ao gap
            // Se o elemento à esquerda for maior, ele é movido para a direita
            for (j = i; j >= gap; j -= gap) {
                contagemComparacoes++;  // Incrementa a contagem de comparações
                if (vetor[j - gap] > temp) {
                    vetor[j] = vetor[j - gap];  // Move o valor maior para a direita
                } else {
                    break;  // Se o valor à esquerda não for maior, sai do loop
                }
            }
            
            // Coloca o valor armazenado na posição correta
            vetor[j] = temp;
            contagemTrocas++;  // Incrementa a contagem de trocas, pois houve uma movimentação
        }
    }
}