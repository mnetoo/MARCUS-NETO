/*

--------    IMPLEMENTAÇÃO DAS FUNÇÕES DE ORDENAÇÃO E BUSCA    --------
--------    ALUNO: MARCUS SEBASTIÃO ADRIANO ROCHA NETO GRR: 20240710    --------
--------    Algoritmos de Ordenação: QuickSort, ShellSort, SelectionSort    --------
--------    Algoritmos de Busca: Sequencial, Binária    --------
--------    TRABALHO PRÁTICO - PROF. DR .ELIAS     --------

*/


//                                      UTILIZANDO A SEQUÊNCIA DE KNUTH


// Função que ordena o vetor utilizando o método ShellSort com a sequência de Knuth
void shellSortKnuth(int vetor[], int n) 
{
    // Inicializa o gap como 1
    int gap = 1;
    
    // Calcula o maior gap de Knuth que seja menor que o tamanho do vetor
    // A sequência de Knuth é gerada pela fórmula: gap = 3 * gap + 1
    // O loop continua até que o gap seja maior que o tamanho do vetor dividido por 3
    while (gap < n / 3) {
        gap = 3 * gap + 1;
    }

    // Enquanto o gap for maior que zero, executa o algoritmo de ordenação
    // A cada iteração, o gap diminui de acordo com a fórmula: gap = (gap - 1) / 3
    for (; gap > 0; gap = (gap - 1) / 3) {
        
        // Ordena os elementos com o gap atual
        // O loop começa com o índice igual ao gap e percorre o vetor
        for (int i = gap; i < n; i++) {
            int temp = vetor[i];  // Armazena o valor do elemento atual
            int j;
            
            // Compara o elemento com o anterior que está no índice i - gap
            // Se o elemento à esquerda (vetor[j - gap]) for maior que o elemento atual, ele é movido para a posição à direita
            for (j = i; j >= gap; j -= gap) {
                contagemComparacoes++;  // Incrementa a contagem de comparações
                if (vetor[j - gap] > temp) {
                    vetor[j] = vetor[j - gap];  // Move o valor para a direita
                } else {
                    break;  // Se não for maior, sai do loop
                }
            }
            
            // Se houve movimentação, coloca o elemento na posição correta
            // Isso ocorre se a comparação indicou que o valor atual deveria ser inserido em uma posição anterior
            if (j != i) {  // Verifica se houve alguma troca
                vetor[j] = temp;
                contagemTrocas++;  // Incrementa a contagem de trocas
            }
        }
    }
}



/*===========================================================================================================*/